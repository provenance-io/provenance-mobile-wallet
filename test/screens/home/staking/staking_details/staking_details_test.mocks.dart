// Mocks generated by Mockito 5.3.0 from annotations
// in provenance_wallet/test/screens/home/staking/staking_details/staking_details_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:provenance_dart/wallet.dart' as _i10;
import 'package:provenance_wallet/screens/home/staking/staking_delegation/staking_delegation_bloc.dart'
    as _i7;
import 'package:provenance_wallet/screens/home/staking/staking_flow/staking_flow.dart'
    as _i4;
import 'package:provenance_wallet/services/models/commission.dart' as _i3;
import 'package:provenance_wallet/services/models/delegation.dart' as _i11;
import 'package:provenance_wallet/services/models/detailed_validator.dart'
    as _i2;
import 'package:provenance_wallet/services/models/provenance_validator.dart'
    as _i9;
import 'package:provenance_wallet/services/models/rewards.dart' as _i6;
import 'package:provenance_wallet/services/validator_client/validator_client.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDetailedValidator_0 extends _i1.SmartFake
    implements _i2.DetailedValidator {
  _FakeDetailedValidator_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeCommission_1 extends _i1.SmartFake implements _i3.Commission {
  _FakeCommission_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [StakingFlowNavigator].
///
/// See the documentation for Mockito's code generation for more information.
class MockStakingFlowNavigator extends _i1.Mock
    implements _i4.StakingFlowNavigator {
  MockStakingFlowNavigator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> showDelegationScreen(
          _i2.DetailedValidator? validator, _i3.Commission? commission) =>
      (super.noSuchMethod(
              Invocation.method(#showDelegationScreen, [validator, commission]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
  @override
  _i5.Future<void> showRedelegationScreen(_i2.DetailedValidator? validator) =>
      (super.noSuchMethod(
              Invocation.method(#showRedelegationScreen, [validator]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
  @override
  _i5.Future<void> redirectToRedelegation(_i2.DetailedValidator? validator) =>
      (super.noSuchMethod(
              Invocation.method(#redirectToRedelegation, [validator]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
  @override
  _i5.Future<void> showRedelegationAmountScreen() => (super.noSuchMethod(
      Invocation.method(#showRedelegationAmountScreen, []),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> showUndelegationScreen(_i2.DetailedValidator? validator) =>
      (super.noSuchMethod(
              Invocation.method(#showUndelegationScreen, [validator]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
  @override
  _i5.Future<void> showDelegationReview() => (super.noSuchMethod(
      Invocation.method(#showDelegationReview, []),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> showUndelegationReview() => (super.noSuchMethod(
      Invocation.method(#showUndelegationReview, []),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> showClaimRewardsReview(
          _i2.DetailedValidator? validator, _i6.Reward? reward) =>
      (super.noSuchMethod(
              Invocation.method(#showClaimRewardsReview, [validator, reward]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
  @override
  _i5.Future<void> showRedelegationReview() => (super.noSuchMethod(
      Invocation.method(#showRedelegationReview, []),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> showTransactionData(Object? data, String? screenTitle) =>
      (super.noSuchMethod(
              Invocation.method(#showTransactionData, [data, screenTitle]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
  @override
  _i5.Future<void> showTransactionComplete(
          Object? response, _i7.SelectedDelegationType? selected) =>
      (super.noSuchMethod(
              Invocation.method(#showTransactionComplete, [response, selected]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
  @override
  void onComplete() => super.noSuchMethod(Invocation.method(#onComplete, []),
      returnValueForMissingStub: null);
  @override
  void backToDashboard() =>
      super.noSuchMethod(Invocation.method(#backToDashboard, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [ValidatorClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockValidatorClient extends _i1.Mock implements _i8.ValidatorClient {
  MockValidatorClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i9.ProvenanceValidator>> getRecentValidators(
          _i10.Coin? coin, int? pageNumber) =>
      (super.noSuchMethod(
              Invocation.method(#getRecentValidators, [coin, pageNumber]),
              returnValue: _i5.Future<List<_i9.ProvenanceValidator>>.value(
                  <_i9.ProvenanceValidator>[]))
          as _i5.Future<List<_i9.ProvenanceValidator>>);
  @override
  _i5.Future<List<_i11.Delegation>> getDelegations(
          _i10.Coin? coin, String? provenanceAddress, int? pageNumber) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getDelegations, [coin, provenanceAddress, pageNumber]),
              returnValue:
                  _i5.Future<List<_i11.Delegation>>.value(<_i11.Delegation>[]))
          as _i5.Future<List<_i11.Delegation>>);
  @override
  _i5.Future<List<_i6.Rewards>> getRewards(
          _i10.Coin? coin, String? provenanceAddress) =>
      (super.noSuchMethod(
              Invocation.method(#getRewards, [coin, provenanceAddress]),
              returnValue: _i5.Future<List<_i6.Rewards>>.value(<_i6.Rewards>[]))
          as _i5.Future<List<_i6.Rewards>>);
  @override
  _i5.Future<_i2.DetailedValidator> getDetailedValidator(
          _i10.Coin? coin, String? validatorAddress) =>
      (super.noSuchMethod(
          Invocation.method(#getDetailedValidator, [coin, validatorAddress]),
          returnValue: _i5.Future<_i2.DetailedValidator>.value(
              _FakeDetailedValidator_0(
                  this,
                  Invocation.method(
                      #getDetailedValidator, [coin, validatorAddress])))) as _i5
          .Future<_i2.DetailedValidator>);
  @override
  _i5.Future<_i3.Commission> getValidatorCommission(
          _i10.Coin? coin, String? validatorAddress) =>
      (super.noSuchMethod(
          Invocation.method(#getValidatorCommission, [coin, validatorAddress]),
          returnValue: _i5.Future<_i3.Commission>.value(_FakeCommission_1(
              this,
              Invocation.method(
                  #getValidatorCommission, [coin, validatorAddress])))) as _i5
          .Future<_i3.Commission>);
}

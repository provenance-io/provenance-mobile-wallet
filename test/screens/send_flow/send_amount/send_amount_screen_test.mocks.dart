// Mocks generated by Mockito 5.1.0 from annotations
// in provenance_wallet/test/screens/send_flow/send_amount/send_amount_screen_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:provenance_wallet/screens/send_flow/model/send_asset.dart'
    as _i2;
import 'package:provenance_wallet/screens/send_flow/send_amount/send_amount_bloc.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSendAsset_0 extends _i1.Fake implements _i2.SendAsset {}

/// A class which mocks [SendAmountBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendAmountBloc extends _i1.Mock implements _i3.SendAmountBloc {
  MockSendAmountBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SendAsset get asset => (super.noSuchMethod(Invocation.getter(#asset),
      returnValue: _FakeSendAsset_0()) as _i2.SendAsset);
  @override
  String get receivingAddress =>
      (super.noSuchMethod(Invocation.getter(#receivingAddress), returnValue: '')
          as String);
  @override
  _i4.Stream<_i3.SendAmountBlocState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.SendAmountBlocState>.empty())
          as _i4.Stream<_i3.SendAmountBlocState>);
  @override
  void init() => super.noSuchMethod(Invocation.method(#init, []),
      returnValueForMissingStub: null);
  @override
  _i4.Future<void> showNext(String? note, String? amount) =>
      (super.noSuchMethod(Invocation.method(#showNext, [note, amount]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

// Mocks generated by Mockito 5.1.0 from annotations
// in provenance_wallet/test/services/remote_notification/default_remote_notification_service_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:provenance_wallet/services/notification/notification_group.dart'
    as _i7;
import 'package:provenance_wallet/services/notification/notification_info.dart'
    as _i6;
import 'package:provenance_wallet/services/notification/notification_service.dart'
    as _i5;
import 'package:provenance_wallet/util/push_notification_helper.dart' as _i3;
import 'package:rxdart/streams.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeValueStream_0<T> extends _i1.Fake implements _i2.ValueStream<T> {}

/// A class which mocks [PushNotificationHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPushNotificationHelper extends _i1.Mock
    implements _i3.PushNotificationHelper {
  MockPushNotificationHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> registerForTopic(String? topic) =>
      (super.noSuchMethod(Invocation.method(#registerForTopic, [topic]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> unregisterForTopic(String? topic) =>
      (super.noSuchMethod(Invocation.method(#unregisterForTopic, [topic]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i5.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ValueStream<List<_i6.NotificationInfo>> get notifications =>
      (super.noSuchMethod(Invocation.getter(#notifications),
              returnValue: _FakeValueStream_0<List<_i6.NotificationInfo>>())
          as _i2.ValueStream<List<_i6.NotificationInfo>>);
  @override
  void notify(_i6.NotificationInfo? notification) =>
      super.noSuchMethod(Invocation.method(#notify, [notification]),
          returnValueForMissingStub: null);
  @override
  void notifyGrouped(_i7.NotificationGroup? group, String? id) =>
      super.noSuchMethod(Invocation.method(#notifyGrouped, [group, id]),
          returnValueForMissingStub: null);
  @override
  void dismiss(String? id) =>
      super.noSuchMethod(Invocation.method(#dismiss, [id]),
          returnValueForMissingStub: null);
  @override
  void dismissGrouped(_i7.NotificationGroup? group, String? id) =>
      super.noSuchMethod(Invocation.method(#dismissGrouped, [group, id]),
          returnValueForMissingStub: null);
}

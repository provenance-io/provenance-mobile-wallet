// Mocks generated by Mockito 5.0.17 from annotations
// in provenance_wallet/test/services/wallet_connect_service_test_imp.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:provenance_dart/proto.dart' as _i3;
import 'package:provenance_dart/src/proto/proto_gen/cosmos/base/abci/v1beta1/abci.pb.dart'
    as _i4;
import 'package:provenance_dart/src/wallet/private_key.dart' as _i9;
import 'package:provenance_dart/src/wallet_connect/wallet_connect_address.dart'
    as _i2;
import 'package:provenance_dart/wallet_connect.dart' as _i5;
import 'package:provenance_wallet/services/wallet_connect_service_imp.dart'
    as _i8;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeWalletConnectAddress_0 extends _i1.Fake
    implements _i2.WalletConnectAddress {}

class _FakeGasEstimate_1 extends _i1.Fake implements _i3.GasEstimate {}

class _FakeRawTxResponsePair_2 extends _i1.Fake
    implements _i3.RawTxResponsePair {}

class _FakeTxRaw_3 extends _i1.Fake implements _i3.TxRaw {}

class _FakeTxResponse_4 extends _i1.Fake implements _i4.TxResponse {}

/// A class which mocks [WalletConnection].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletConnection extends _i1.Mock implements _i5.WalletConnection {
  MockWalletConnection() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WalletConnectAddress get address => (super.noSuchMethod(
      Invocation.getter(#address),
      returnValue: _FakeWalletConnectAddress_0()) as _i2.WalletConnectAddress);
  @override
  _i5.WalletConnectState get value => (super.noSuchMethod(
          Invocation.getter(#value),
          returnValue: _i5.WalletConnectState.connecting)
      as _i5.WalletConnectState);
  @override
  _i6.Future<void> connect(_i5.WalletConnectionDelegate? delegate) =>
      (super.noSuchMethod(Invocation.method(#connect, [delegate]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> disconnect() =>
      (super.noSuchMethod(Invocation.method(#disconnect, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  void addListener(_i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
}

/// A class which mocks [TransactionHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionHandler extends _i1.Mock
    implements _i8.TransactionHandler {
  MockTransactionHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.GasEstimate> estimateGas(
          _i3.TxBody? txBody, _i9.PrivateKey? privateKey) =>
      (super.noSuchMethod(Invocation.method(#estimateGas, [txBody, privateKey]),
              returnValue: Future<_i3.GasEstimate>.value(_FakeGasEstimate_1()))
          as _i6.Future<_i3.GasEstimate>);
  @override
  _i6.Future<_i3.RawTxResponsePair> executeTransaction(
          _i3.TxBody? txBody, _i9.PrivateKey? privateKey) =>
      (super.noSuchMethod(
              Invocation.method(#executeTransaction, [txBody, privateKey]),
              returnValue: Future<_i3.RawTxResponsePair>.value(
                  _FakeRawTxResponsePair_2()))
          as _i6.Future<_i3.RawTxResponsePair>);
}

/// A class which mocks [RawTxResponsePair].
///
/// See the documentation for Mockito's code generation for more information.
class MockRawTxResponsePair extends _i1.Mock implements _i3.RawTxResponsePair {
  MockRawTxResponsePair() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TxRaw get txRaw => (super.noSuchMethod(Invocation.getter(#txRaw),
      returnValue: _FakeTxRaw_3()) as _i3.TxRaw);
  @override
  _i4.TxResponse get txResponse =>
      (super.noSuchMethod(Invocation.getter(#txResponse),
          returnValue: _FakeTxResponse_4()) as _i4.TxResponse);
  @override
  String asJsonString() =>
      (super.noSuchMethod(Invocation.method(#asJsonString, []), returnValue: '')
          as String);
}

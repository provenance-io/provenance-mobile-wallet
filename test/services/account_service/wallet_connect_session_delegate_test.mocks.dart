// Mocks generated by Mockito 5.3.0 from annotations
// in provenance_wallet/test/services/account_service/wallet_connect_session_delegate_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:ui' as _i19;

import 'package:flutter/widgets.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:provenance_dart/proto.dart' as _i12;
import 'package:provenance_dart/wallet.dart' as _i5;
import 'package:provenance_dart/wallet_connect.dart' as _i8;
import 'package:provenance_wallet/clients/multi_sig_client/models/multi_sig_signer.dart'
    as _i11;
import 'package:provenance_wallet/gas_fee_estimate.dart' as _i6;
import 'package:provenance_wallet/network.dart' as _i10;
import 'package:provenance_wallet/services/account_service/account_service.dart'
    as _i2;
import 'package:provenance_wallet/services/models/account.dart' as _i3;
import 'package:provenance_wallet/services/tx_queue_service/tx_queue_service.dart'
    as _i7;
import 'package:provenance_wallet/services/wallet_connect_queue_service/models/wallet_connect_queue_group.dart'
    as _i17;
import 'package:provenance_wallet/services/wallet_connect_queue_service/wallet_connect_queue_service.dart'
    as _i13;
import 'package:provenance_wallet/services/wallet_connect_service/models/session_action.dart'
    as _i16;
import 'package:provenance_wallet/services/wallet_connect_service/models/sign_action.dart'
    as _i14;
import 'package:provenance_wallet/services/wallet_connect_service/models/tx_action.dart'
    as _i15;
import 'package:provenance_wallet/services/wallet_connect_service/models/wallet_connect_action.dart'
    as _i18;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAccountServiceEvents_0 extends _i1.SmartFake
    implements _i2.AccountServiceEvents {
  _FakeAccountServiceEvents_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeAccount_1 extends _i1.SmartFake implements _i3.Account {
  _FakeAccount_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeBasicAccount_2 extends _i1.SmartFake implements _i3.BasicAccount {
  _FakeBasicAccount_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeMultiAccount_3 extends _i1.SmartFake implements _i3.MultiAccount {
  _FakeMultiAccount_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeMultiTransactableAccount_4 extends _i1.SmartFake
    implements _i3.MultiTransactableAccount {
  _FakeMultiTransactableAccount_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakePrivateKey_5 extends _i1.SmartFake implements _i5.PrivateKey {
  _FakePrivateKey_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGasFeeEstimate_6 extends _i1.SmartFake
    implements _i6.GasFeeEstimate {
  _FakeGasFeeEstimate_6(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeQueuedTx_7 extends _i1.SmartFake implements _i7.QueuedTx {
  _FakeQueuedTx_7(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeWalletConnectAddress_8 extends _i1.SmartFake
    implements _i8.WalletConnectAddress {
  _FakeWalletConnectAddress_8(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [AccountService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountService extends _i1.Mock implements _i2.AccountService {
  MockAccountService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AccountServiceEvents get events =>
      (super.noSuchMethod(Invocation.getter(#events),
              returnValue:
                  _FakeAccountServiceEvents_0(this, Invocation.getter(#events)))
          as _i2.AccountServiceEvents);
  @override
  _i9.Future<_i3.Account?> getAccount(String? id) =>
      (super.noSuchMethod(Invocation.method(#getAccount, [id]),
              returnValue: _i9.Future<_i3.Account?>.value())
          as _i9.Future<_i3.Account?>);
  @override
  _i9.Future<_i3.Account?> selectFirstAccount() =>
      (super.noSuchMethod(Invocation.method(#selectFirstAccount, []),
              returnValue: _i9.Future<_i3.Account?>.value())
          as _i9.Future<_i3.Account?>);
  @override
  _i9.Future<_i3.TransactableAccount?> selectAccount({String? id}) =>
      (super.noSuchMethod(Invocation.method(#selectAccount, [], {#id: id}),
              returnValue: _i9.Future<_i3.TransactableAccount?>.value())
          as _i9.Future<_i3.TransactableAccount?>);
  @override
  _i9.Future<_i3.TransactableAccount?> getSelectedAccount() =>
      (super.noSuchMethod(Invocation.method(#getSelectedAccount, []),
              returnValue: _i9.Future<_i3.TransactableAccount?>.value())
          as _i9.Future<_i3.TransactableAccount?>);
  @override
  _i9.Future<List<_i3.Account>> getAccounts() =>
      (super.noSuchMethod(Invocation.method(#getAccounts, []),
              returnValue: _i9.Future<List<_i3.Account>>.value(<_i3.Account>[]))
          as _i9.Future<List<_i3.Account>>);
  @override
  _i9.Future<List<_i3.BasicAccount>> getBasicAccounts() => (super.noSuchMethod(
          Invocation.method(#getBasicAccounts, []),
          returnValue:
              _i9.Future<List<_i3.BasicAccount>>.value(<_i3.BasicAccount>[]))
      as _i9.Future<List<_i3.BasicAccount>>);
  @override
  _i9.Future<List<_i3.TransactableAccount>> getTransactableAccounts() =>
      (super.noSuchMethod(Invocation.method(#getTransactableAccounts, []),
              returnValue: _i9.Future<List<_i3.TransactableAccount>>.value(
                  <_i3.TransactableAccount>[]))
          as _i9.Future<List<_i3.TransactableAccount>>);
  @override
  _i9.Future<_i3.Account> renameAccount({String? id, String? name}) =>
      (super.noSuchMethod(
              Invocation.method(#renameAccount, [], {#id: id, #name: name}),
              returnValue: _i9.Future<_i3.Account>.value(_FakeAccount_1(
                  this,
                  Invocation.method(
                      #renameAccount, [], {#id: id, #name: name}))))
          as _i9.Future<_i3.Account>);
  @override
  _i9.Future<_i3.Account> selectNetwork(
          {String? accountId, _i10.Network? network}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #selectNetwork, [], {#accountId: accountId, #network: network}),
              returnValue: _i9.Future<_i3.Account>.value(_FakeAccount_1(this,
                  Invocation.method(#selectNetwork, [], {#accountId: accountId, #network: network}))))
          as _i9.Future<_i3.Account>);
  @override
  _i9.Future<_i3.BasicAccount> addAccount(
          {List<String>? phrase, String? name, _i10.Network? network}) =>
      (super
          .noSuchMethod(Invocation.method(#addAccount, [], {#phrase: phrase, #name: name, #network: network}),
              returnValue: _i9.Future<_i3.BasicAccount>.value(
                  _FakeBasicAccount_2(
                      this,
                      Invocation.method(#addAccount, [], {
                        #phrase: phrase,
                        #name: name,
                        #network: network
                      })))) as _i9.Future<_i3.BasicAccount>);
  @override
  _i9.Future<_i3.MultiAccount> addMultiAccount(
          {String? name,
          _i5.Coin? coin,
          String? linkedAccountId,
          String? remoteId,
          int? cosignerCount,
          int? signaturesRequired,
          List<String>? inviteIds,
          List<_i11.MultiSigSigner>? signers}) =>
      (super.noSuchMethod(
          Invocation.method(#addMultiAccount, [], {
            #name: name,
            #coin: coin,
            #linkedAccountId: linkedAccountId,
            #remoteId: remoteId,
            #cosignerCount: cosignerCount,
            #signaturesRequired: signaturesRequired,
            #inviteIds: inviteIds,
            #signers: signers
          }),
          returnValue: _i9.Future<_i3.MultiAccount>.value(_FakeMultiAccount_3(
              this,
              Invocation.method(#addMultiAccount, [], {
                #name: name,
                #coin: coin,
                #linkedAccountId: linkedAccountId,
                #remoteId: remoteId,
                #cosignerCount: cosignerCount,
                #signaturesRequired: signaturesRequired,
                #inviteIds: inviteIds,
                #signers: signers
              })))) as _i9.Future<_i3.MultiAccount>);
  @override
  _i9.Future<_i3.MultiTransactableAccount> activateMultiAccount(
          {String? id, List<_i11.MultiSigSigner>? signers}) =>
      (super.noSuchMethod(Invocation.method(#activateMultiAccount, [], {#id: id, #signers: signers}),
          returnValue: _i9.Future<_i3.MultiTransactableAccount>.value(
              _FakeMultiTransactableAccount_4(
                  this,
                  Invocation.method(#activateMultiAccount, [], {
                    #id: id,
                    #signers: signers
                  })))) as _i9.Future<_i3.MultiTransactableAccount>);
  @override
  _i9.Future<_i3.Account?> removeAccount({String? id}) =>
      (super.noSuchMethod(Invocation.method(#removeAccount, [], {#id: id}),
              returnValue: _i9.Future<_i3.Account?>.value())
          as _i9.Future<_i3.Account?>);
  @override
  _i9.Future<List<_i3.Account>> resetAccounts() =>
      (super.noSuchMethod(Invocation.method(#resetAccounts, []),
              returnValue: _i9.Future<List<_i3.Account>>.value(<_i3.Account>[]))
          as _i9.Future<List<_i3.Account>>);
  @override
  _i9.Future<_i5.PrivateKey> loadKey(String? accountId, _i5.Coin? coin) =>
      (super.noSuchMethod(Invocation.method(#loadKey, [accountId, coin]),
              returnValue: _i9.Future<_i5.PrivateKey>.value(_FakePrivateKey_5(
                  this, Invocation.method(#loadKey, [accountId, coin]))))
          as _i9.Future<_i5.PrivateKey>);
}

/// A class which mocks [TxQueueService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTxQueueService extends _i1.Mock implements _i7.TxQueueService {
  MockTxQueueService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Stream<_i7.TxResult> get response =>
      (super.noSuchMethod(Invocation.getter(#response),
              returnValue: _i9.Stream<_i7.TxResult>.empty())
          as _i9.Stream<_i7.TxResult>);
  @override
  _i9.Future<_i6.GasFeeEstimate> estimateGas(
          {_i12.TxBody? txBody,
          _i3.TransactableAccount? account,
          double? gasAdjustment}) =>
      (super.noSuchMethod(Invocation.method(#estimateGas, [], {#txBody: txBody, #account: account, #gasAdjustment: gasAdjustment}),
          returnValue: _i9.Future<_i6.GasFeeEstimate>.value(
              _FakeGasFeeEstimate_6(
                  this,
                  Invocation.method(#estimateGas, [], {
                    #txBody: txBody,
                    #account: account,
                    #gasAdjustment: gasAdjustment
                  })))) as _i9.Future<_i6.GasFeeEstimate>);
  @override
  _i9.Future<_i7.QueuedTx> scheduleTx(
          {_i12.TxBody? txBody,
          _i3.TransactableAccount? account,
          _i6.GasFeeEstimate? gasEstimate,
          int? walletConnectRequestId}) =>
      (super.noSuchMethod(
          Invocation.method(#scheduleTx, [], {
            #txBody: txBody,
            #account: account,
            #gasEstimate: gasEstimate,
            #walletConnectRequestId: walletConnectRequestId
          }),
          returnValue: _i9.Future<_i7.QueuedTx>.value(_FakeQueuedTx_7(
              this,
              Invocation.method(#scheduleTx, [], {
                #txBody: txBody,
                #account: account,
                #gasEstimate: gasEstimate,
                #walletConnectRequestId: walletConnectRequestId
              })))) as _i9.Future<_i7.QueuedTx>);
  @override
  _i9.Future<void> completeTx({String? txId}) => (super.noSuchMethod(
      Invocation.method(#completeTx, [], {#txId: txId}),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<bool> signTx(
          {String? txId,
          String? signerAddress,
          String? multiSigAddress,
          _i12.TxBody? txBody,
          _i12.Fee? fee}) =>
      (super.noSuchMethod(
          Invocation.method(#signTx, [], {
            #txId: txId,
            #signerAddress: signerAddress,
            #multiSigAddress: multiSigAddress,
            #txBody: txBody,
            #fee: fee
          }),
          returnValue: _i9.Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> declineTx(
          {String? signerAddress, String? txId, _i5.Coin? coin}) =>
      (super.noSuchMethod(
          Invocation.method(#declineTx, [],
              {#signerAddress: signerAddress, #txId: txId, #coin: coin}),
          returnValue: _i9.Future<bool>.value(false)) as _i9.Future<bool>);
}

/// A class which mocks [WalletConnectQueueService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletConnectQueueService extends _i1.Mock
    implements _i13.WalletConnectQueueService {
  MockWalletConnectQueueService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> createWalletConnectSessionGroup(
          {String? accountId, _i8.ClientMeta? clientMeta}) =>
      (super.noSuchMethod(
              Invocation.method(#createWalletConnectSessionGroup, [],
                  {#accountId: accountId, #clientMeta: clientMeta}),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<void> removeWalletConnectSessionGroup({String? accountId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #removeWalletConnectSessionGroup, [], {#accountId: accountId}),
          returnValue: _i9.Future<void>.value(),
          returnValueForMissingStub:
              _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updateConnectionDetails(
          {String? accountId, _i8.ClientMeta? clientMeta}) =>
      (super.noSuchMethod(
              Invocation.method(#updateConnectionDetails, [],
                  {#accountId: accountId, #clientMeta: clientMeta}),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<void> addWalletConnectSignRequest(
          {String? accountId, _i14.SignAction? signAction}) =>
      (super.noSuchMethod(
              Invocation.method(#addWalletConnectSignRequest, [],
                  {#accountId: accountId, #signAction: signAction}),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<void> addWalletConnectTxRequest(
          {String? accountId, _i15.TxAction? txAction}) =>
      (super.noSuchMethod(
              Invocation.method(#addWalletConnectTxRequest, [],
                  {#accountId: accountId, #txAction: txAction}),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<void> addWalletApproveRequest(
          {String? accountId, _i16.SessionAction? action}) =>
      (super.noSuchMethod(
              Invocation.method(#addWalletApproveRequest, [],
                  {#accountId: accountId, #action: action}),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<_i17.WalletConnectQueueGroup?> loadGroup({String? accountId}) =>
      (super.noSuchMethod(
              Invocation.method(#loadGroup, [], {#accountId: accountId}),
              returnValue: _i9.Future<_i17.WalletConnectQueueGroup?>.value())
          as _i9.Future<_i17.WalletConnectQueueGroup?>);
  @override
  _i9.Future<_i18.WalletConnectAction?> loadQueuedAction(
          {String? accountId, String? requestId}) =>
      (super.noSuchMethod(
              Invocation.method(#loadQueuedAction, [],
                  {#accountId: accountId, #requestId: requestId}),
              returnValue: _i9.Future<_i18.WalletConnectAction?>.value())
          as _i9.Future<_i18.WalletConnectAction?>);
  @override
  _i9.Future<void> removeRequest({String? accountId, String? requestId}) =>
      (super.noSuchMethod(
              Invocation.method(#removeRequest, [],
                  {#accountId: accountId, #requestId: requestId}),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<List<_i17.WalletConnectQueueGroup>> loadAllGroups() =>
      (super.noSuchMethod(Invocation.method(#loadAllGroups, []),
              returnValue: _i9.Future<List<_i17.WalletConnectQueueGroup>>.value(
                  <_i17.WalletConnectQueueGroup>[]))
          as _i9.Future<List<_i17.WalletConnectQueueGroup>>);
  @override
  void addListener(_i19.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i19.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [WalletConnection].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletConnection extends _i1.Mock implements _i8.WalletConnection {
  MockWalletConnection() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.WalletConnectAddress get address => (super.noSuchMethod(
          Invocation.getter(#address),
          returnValue:
              _FakeWalletConnectAddress_8(this, Invocation.getter(#address)))
      as _i8.WalletConnectAddress);
  @override
  _i8.WalletConnectState get value => (super.noSuchMethod(
          Invocation.getter(#value),
          returnValue: _i8.WalletConnectState.connecting)
      as _i8.WalletConnectState);
  @override
  _i9.Future<void> connect(_i8.WalletConnectionDelegate? delegate,
          [_i8.SessionRestoreData? restoreData]) =>
      (super.noSuchMethod(Invocation.method(#connect, [delegate, restoreData]),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<void> dispose() => (super.noSuchMethod(
      Invocation.method(#dispose, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> disconnect() => (super.noSuchMethod(
      Invocation.method(#disconnect, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> sendError(int? requestId, String? error) =>
      (super.noSuchMethod(Invocation.method(#sendError, [requestId, error]),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<void> reject(int? requestId) => (super.noSuchMethod(
      Invocation.method(#reject, [requestId]),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> sendTransactionResult(
          int? requestId, _i12.RawTxResponsePair? txResponsePair) =>
      (super.noSuchMethod(
              Invocation.method(
                  #sendTransactionResult, [requestId, txResponsePair]),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<void> sendSignResult(int? requestId, List<int>? signedData) =>
      (super.noSuchMethod(
              Invocation.method(#sendSignResult, [requestId, signedData]),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<void> sendMultiSigSignResult(
          int? requestId, List<_i5.AminoSignature>? signatures) =>
      (super.noSuchMethod(
          Invocation.method(#sendMultiSigSignResult, [requestId, signatures]),
          returnValue: _i9.Future<void>.value(),
          returnValueForMissingStub:
              _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> sendApproveSession(
          int? requestId, _i8.SessionApprovalData? sessionApprovalData,
          [_i8.ClientMeta? peerMeta]) =>
      (super.noSuchMethod(
          Invocation.method(
              #sendApproveSession, [requestId, sessionApprovalData, peerMeta]),
          returnValue: _i9.Future<void>.value(),
          returnValueForMissingStub:
              _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  void addListener(_i19.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i19.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
}

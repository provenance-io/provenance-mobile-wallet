// Mocks generated by Mockito 5.1.0 from annotations
// in provenance_wallet/test/services/account_service/wallet_connect_transaction_handler_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i30;

import 'package:mockito/mockito.dart' as _i1;
import 'package:provenance_dart/src/proto/base_req.dart' as _i26;
import 'package:provenance_dart/src/proto/gas.dart' as _i27;
import 'package:provenance_dart/src/proto/pb_client.dart' as _i2;
import 'package:provenance_dart/src/proto/proto_gen/cosmos/auth/v1beta1/auth.pb.dart'
    as _i29;
import 'package:provenance_dart/src/proto/proto_gen/cosmos/auth/v1beta1/query.pbgrpc.dart'
    as _i6;
import 'package:provenance_dart/src/proto/proto_gen/cosmos/authz/v1beta1/query.pbgrpc.dart'
    as _i7;
import 'package:provenance_dart/src/proto/proto_gen/cosmos/bank/v1beta1/query.pbgrpc.dart'
    as _i8;
import 'package:provenance_dart/src/proto/proto_gen/cosmos/base/tendermint/v1beta1/query.pbgrpc.dart'
    as _i4;
import 'package:provenance_dart/src/proto/proto_gen/cosmos/distribution/v1beta1/query.pbgrpc.dart'
    as _i11;
import 'package:provenance_dart/src/proto/proto_gen/cosmos/evidence/v1beta1/query.pbgrpc.dart'
    as _i12;
import 'package:provenance_dart/src/proto/proto_gen/cosmos/feegrant/v1beta1/query.pbgrpc.dart'
    as _i13;
import 'package:provenance_dart/src/proto/proto_gen/cosmos/gov/v1beta1/query.pbgrpc.dart'
    as _i14;
import 'package:provenance_dart/src/proto/proto_gen/cosmos/mint/v1beta1/query.pbgrpc.dart'
    as _i18;
import 'package:provenance_dart/src/proto/proto_gen/cosmos/params/v1beta1/query.pbgrpc.dart'
    as _i20;
import 'package:provenance_dart/src/proto/proto_gen/cosmos/slashing/v1beta1/query.pbgrpc.dart'
    as _i21;
import 'package:provenance_dart/src/proto/proto_gen/cosmos/staking/v1beta1/query.pbgrpc.dart'
    as _i22;
import 'package:provenance_dart/src/proto/proto_gen/cosmos/tx/v1beta1/service.pbgrpc.dart'
    as _i3;
import 'package:provenance_dart/src/proto/proto_gen/cosmos/tx/v1beta1/tx.pb.dart'
    as _i31;
import 'package:provenance_dart/src/proto/proto_gen/cosmos/upgrade/v1beta1/query.pbgrpc.dart'
    as _i24;
import 'package:provenance_dart/src/proto/proto_gen/cosmwasm/wasm/v1/query.pbgrpc.dart'
    as _i25;
import 'package:provenance_dart/src/proto/proto_gen/ibc/applications/transfer/v1/query.pbgrpc.dart'
    as _i23;
import 'package:provenance_dart/src/proto/proto_gen/ibc/core/channel/v1/query.pbgrpc.dart'
    as _i9;
import 'package:provenance_dart/src/proto/proto_gen/ibc/core/connection/v1/query.pbgrpc.dart'
    as _i10;
import 'package:provenance_dart/src/proto/proto_gen/provenance/attribute/v1/query.pbgrpc.dart'
    as _i5;
import 'package:provenance_dart/src/proto/proto_gen/provenance/marker/v1/query.pbgrpc.dart'
    as _i15;
import 'package:provenance_dart/src/proto/proto_gen/provenance/metadata/v1/query.pbgrpc.dart'
    as _i17;
import 'package:provenance_dart/src/proto/proto_gen/provenance/msgfees/v1/query.pbgrpc.dart'
    as _i16;
import 'package:provenance_dart/src/proto/proto_gen/provenance/name/v1/query.pbgrpc.dart'
    as _i19;
import 'package:provenance_dart/src/proto/raw_tx_response.dart' as _i28;
import 'package:provenance_dart/wallet.dart' as _i34;
import 'package:provenance_wallet/services/gas_fee_service/gas_fee_service.dart'
    as _i32;
import 'package:provenance_wallet/services/models/gas_fee.dart' as _i33;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUri_0 extends _i1.Fake implements Uri {}

class _FakeChannelOpts_1 extends _i1.Fake implements _i2.ChannelOpts {}

class _FakeServiceClient_2 extends _i1.Fake implements _i3.ServiceClient {}

class _FakeServiceClient_3 extends _i1.Fake implements _i4.ServiceClient {}

class _FakeQueryClient_4 extends _i1.Fake implements _i5.QueryClient {}

class _FakeQueryClient_5 extends _i1.Fake implements _i6.QueryClient {}

class _FakeQueryClient_6 extends _i1.Fake implements _i7.QueryClient {}

class _FakeQueryClient_7 extends _i1.Fake implements _i8.QueryClient {}

class _FakeQueryClient_8 extends _i1.Fake implements _i9.QueryClient {}

class _FakeQueryClient_9 extends _i1.Fake implements _i10.QueryClient {}

class _FakeQueryClient_10 extends _i1.Fake implements _i11.QueryClient {}

class _FakeQueryClient_11 extends _i1.Fake implements _i12.QueryClient {}

class _FakeQueryClient_12 extends _i1.Fake implements _i13.QueryClient {}

class _FakeQueryClient_13 extends _i1.Fake implements _i14.QueryClient {}

class _FakeQueryClient_14 extends _i1.Fake implements _i15.QueryClient {}

class _FakeQueryClient_15 extends _i1.Fake implements _i16.QueryClient {}

class _FakeQueryClient_16 extends _i1.Fake implements _i17.QueryClient {}

class _FakeQueryClient_17 extends _i1.Fake implements _i18.QueryClient {}

class _FakeQueryClient_18 extends _i1.Fake implements _i19.QueryClient {}

class _FakeQueryClient_19 extends _i1.Fake implements _i20.QueryClient {}

class _FakeQueryClient_20 extends _i1.Fake implements _i21.QueryClient {}

class _FakeQueryClient_21 extends _i1.Fake implements _i22.QueryClient {}

class _FakeQueryClient_22 extends _i1.Fake implements _i23.QueryClient {}

class _FakeQueryClient_23 extends _i1.Fake implements _i24.QueryClient {}

class _FakeQueryClient_24 extends _i1.Fake implements _i25.QueryClient {}

class _FakeBaseReq_25 extends _i1.Fake implements _i26.BaseReq {}

class _FakeGasEstimate_26 extends _i1.Fake implements _i27.GasEstimate {}

class _FakeRawTxResponsePair_27 extends _i1.Fake
    implements _i28.RawTxResponsePair {}

class _FakeBaseAccount_28 extends _i1.Fake implements _i29.BaseAccount {}

/// A class which mocks [PbClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockPbClient extends _i1.Mock implements _i2.PbClient {
  MockPbClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get chainId =>
      (super.noSuchMethod(Invocation.getter(#chainId), returnValue: '')
          as String);
  @override
  Uri get channelUri => (super.noSuchMethod(Invocation.getter(#channelUri),
      returnValue: _FakeUri_0()) as Uri);
  @override
  _i2.ChannelOpts get channelOpts =>
      (super.noSuchMethod(Invocation.getter(#channelOpts),
          returnValue: _FakeChannelOpts_1()) as _i2.ChannelOpts);
  @override
  _i3.ServiceClient get cosmosService =>
      (super.noSuchMethod(Invocation.getter(#cosmosService),
          returnValue: _FakeServiceClient_2()) as _i3.ServiceClient);
  @override
  _i4.ServiceClient get tindermintService =>
      (super.noSuchMethod(Invocation.getter(#tindermintService),
          returnValue: _FakeServiceClient_3()) as _i4.ServiceClient);
  @override
  _i5.QueryClient get attributeClient =>
      (super.noSuchMethod(Invocation.getter(#attributeClient),
          returnValue: _FakeQueryClient_4()) as _i5.QueryClient);
  @override
  _i6.QueryClient get authClient =>
      (super.noSuchMethod(Invocation.getter(#authClient),
          returnValue: _FakeQueryClient_5()) as _i6.QueryClient);
  @override
  _i7.QueryClient get authzClient =>
      (super.noSuchMethod(Invocation.getter(#authzClient),
          returnValue: _FakeQueryClient_6()) as _i7.QueryClient);
  @override
  _i8.QueryClient get bankClient =>
      (super.noSuchMethod(Invocation.getter(#bankClient),
          returnValue: _FakeQueryClient_7()) as _i8.QueryClient);
  @override
  _i9.QueryClient get channelClient =>
      (super.noSuchMethod(Invocation.getter(#channelClient),
          returnValue: _FakeQueryClient_8()) as _i9.QueryClient);
  @override
  _i10.QueryClient get connectionClient =>
      (super.noSuchMethod(Invocation.getter(#connectionClient),
          returnValue: _FakeQueryClient_9()) as _i10.QueryClient);
  @override
  _i11.QueryClient get distributionClient =>
      (super.noSuchMethod(Invocation.getter(#distributionClient),
          returnValue: _FakeQueryClient_10()) as _i11.QueryClient);
  @override
  _i12.QueryClient get evidenceClient =>
      (super.noSuchMethod(Invocation.getter(#evidenceClient),
          returnValue: _FakeQueryClient_11()) as _i12.QueryClient);
  @override
  _i13.QueryClient get feeGrantClient =>
      (super.noSuchMethod(Invocation.getter(#feeGrantClient),
          returnValue: _FakeQueryClient_12()) as _i13.QueryClient);
  @override
  _i14.QueryClient get govClient =>
      (super.noSuchMethod(Invocation.getter(#govClient),
          returnValue: _FakeQueryClient_13()) as _i14.QueryClient);
  @override
  _i15.QueryClient get markerClient =>
      (super.noSuchMethod(Invocation.getter(#markerClient),
          returnValue: _FakeQueryClient_14()) as _i15.QueryClient);
  @override
  _i16.QueryClient get msgFeeClient =>
      (super.noSuchMethod(Invocation.getter(#msgFeeClient),
          returnValue: _FakeQueryClient_15()) as _i16.QueryClient);
  @override
  _i17.QueryClient get metadataClient =>
      (super.noSuchMethod(Invocation.getter(#metadataClient),
          returnValue: _FakeQueryClient_16()) as _i17.QueryClient);
  @override
  _i18.QueryClient get mintClient =>
      (super.noSuchMethod(Invocation.getter(#mintClient),
          returnValue: _FakeQueryClient_17()) as _i18.QueryClient);
  @override
  _i19.QueryClient get nameClient =>
      (super.noSuchMethod(Invocation.getter(#nameClient),
          returnValue: _FakeQueryClient_18()) as _i19.QueryClient);
  @override
  _i20.QueryClient get paramsClient =>
      (super.noSuchMethod(Invocation.getter(#paramsClient),
          returnValue: _FakeQueryClient_19()) as _i20.QueryClient);
  @override
  _i21.QueryClient get slashingClient =>
      (super.noSuchMethod(Invocation.getter(#slashingClient),
          returnValue: _FakeQueryClient_20()) as _i21.QueryClient);
  @override
  _i22.QueryClient get stakingClient =>
      (super.noSuchMethod(Invocation.getter(#stakingClient),
          returnValue: _FakeQueryClient_21()) as _i22.QueryClient);
  @override
  _i23.QueryClient get transferClient =>
      (super.noSuchMethod(Invocation.getter(#transferClient),
          returnValue: _FakeQueryClient_22()) as _i23.QueryClient);
  @override
  _i24.QueryClient get upgradeClient =>
      (super.noSuchMethod(Invocation.getter(#upgradeClient),
          returnValue: _FakeQueryClient_23()) as _i24.QueryClient);
  @override
  _i25.QueryClient get wasmClient =>
      (super.noSuchMethod(Invocation.getter(#wasmClient),
          returnValue: _FakeQueryClient_24()) as _i25.QueryClient);
  @override
  _i30.Future<void> dispose() => (super.noSuchMethod(
      Invocation.method(#dispose, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i30.Future<void>);
  @override
  _i30.Future<_i26.BaseReq> baseRequest(
          _i31.TxBody? txBody, List<_i26.BaseReqSigner>? signers,
          {double? gasAdjustment, String? feeGranter}) =>
      (super.noSuchMethod(
              Invocation.method(#baseRequest, [txBody, signers],
                  {#gasAdjustment: gasAdjustment, #feeGranter: feeGranter}),
              returnValue: Future<_i26.BaseReq>.value(_FakeBaseReq_25()))
          as _i30.Future<_i26.BaseReq>);
  @override
  _i30.Future<_i27.GasEstimate> estimateTx(_i26.BaseReq? baseReq) =>
      (super.noSuchMethod(Invocation.method(#estimateTx, [baseReq]),
              returnValue:
                  Future<_i27.GasEstimate>.value(_FakeGasEstimate_26()))
          as _i30.Future<_i27.GasEstimate>);
  @override
  _i30.Future<_i28.RawTxResponsePair> broadcastTx(
          _i26.BaseReq? baseReq, _i27.GasEstimate? gasEstimate,
          [_i3.BroadcastMode? mode = _i3.BroadcastMode.BROADCAST_MODE_SYNC]) =>
      (super.noSuchMethod(
              Invocation.method(#broadcastTx, [baseReq, gasEstimate, mode]),
              returnValue: Future<_i28.RawTxResponsePair>.value(
                  _FakeRawTxResponsePair_27()))
          as _i30.Future<_i28.RawTxResponsePair>);
  @override
  _i30.Future<_i28.RawTxResponsePair> estimateAndBroadcastTx(
          _i31.TxBody? txBody, List<_i26.BaseReqSigner>? signers,
          {_i3.BroadcastMode? mode = _i3.BroadcastMode.BROADCAST_MODE_SYNC,
          double? gasAdjustment,
          String? feeGranter}) =>
      (super.noSuchMethod(
              Invocation.method(#estimateAndBroadcastTx, [
                txBody,
                signers
              ], {
                #mode: mode,
                #gasAdjustment: gasAdjustment,
                #feeGranter: feeGranter
              }),
              returnValue: Future<_i28.RawTxResponsePair>.value(
                  _FakeRawTxResponsePair_27()))
          as _i30.Future<_i28.RawTxResponsePair>);
  @override
  _i30.Future<_i29.BaseAccount> getBaseAccount(String? bech32Address) =>
      (super.noSuchMethod(Invocation.method(#getBaseAccount, [bech32Address]),
              returnValue:
                  Future<_i29.BaseAccount>.value(_FakeBaseAccount_28()))
          as _i30.Future<_i29.BaseAccount>);
}

/// A class which mocks [GasFeeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGasFeeService extends _i1.Mock implements _i32.GasFeeService {
  MockGasFeeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i30.Future<_i33.GasFee?> getGasFee(_i34.Coin? coin) => (super.noSuchMethod(
      Invocation.method(#getGasFee, [coin]),
      returnValue: Future<_i33.GasFee?>.value()) as _i30.Future<_i33.GasFee?>);
}

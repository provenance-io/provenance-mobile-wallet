// Mocks generated by Mockito 5.3.0 from annotations
// in provenance_wallet/test/services/account_service/wallet_connect_session_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:provenance_dart/proto.dart' as _i6;
import 'package:provenance_dart/wallet_connect.dart' as _i2;
import 'package:provenance_wallet/services/key_value_service/key_value_service.dart'
    as _i10;
import 'package:provenance_wallet/services/remote_notification/multi_sig_remote_notification.dart'
    as _i9;
import 'package:provenance_wallet/services/remote_notification/remote_notification_service.dart'
    as _i8;
import 'package:provenance_wallet/services/wallet_connect_service/wallet_connect_session_delegate.dart'
    as _i3;
import 'package:rxdart/rxdart.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWalletConnectAddress_0 extends _i1.SmartFake
    implements _i2.WalletConnectAddress {
  _FakeWalletConnectAddress_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeWalletConnectSessionDelegateEvents_1 extends _i1.SmartFake
    implements _i3.WalletConnectSessionDelegateEvents {
  _FakeWalletConnectSessionDelegateEvents_1(
      Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeValueStream_2<T> extends _i1.SmartFake
    implements _i4.ValueStream<T> {
  _FakeValueStream_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [WalletConnection].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletConnection extends _i1.Mock implements _i2.WalletConnection {
  MockWalletConnection() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WalletConnectAddress get address => (super.noSuchMethod(
          Invocation.getter(#address),
          returnValue:
              _FakeWalletConnectAddress_0(this, Invocation.getter(#address)))
      as _i2.WalletConnectAddress);
  @override
  _i2.WalletConnectState get value => (super.noSuchMethod(
          Invocation.getter(#value),
          returnValue: _i2.WalletConnectState.connecting)
      as _i2.WalletConnectState);
  @override
  _i5.Future<void> connect(_i2.WalletConnectionDelegate? delegate,
          [_i2.SessionRestoreData? restoreData]) =>
      (super.noSuchMethod(Invocation.method(#connect, [delegate, restoreData]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
  @override
  _i5.Future<void> dispose() => (super.noSuchMethod(
      Invocation.method(#dispose, []),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> disconnect() => (super.noSuchMethod(
      Invocation.method(#disconnect, []),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> sendError(int? requestId, String? error) =>
      (super.noSuchMethod(Invocation.method(#sendError, [requestId, error]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
  @override
  _i5.Future<void> reject(int? requestId) => (super.noSuchMethod(
      Invocation.method(#reject, [requestId]),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> sendTransactionResult(
          int? requestId, _i6.RawTxResponsePair? txResponsePair) =>
      (super.noSuchMethod(
              Invocation.method(
                  #sendTransactionResult, [requestId, txResponsePair]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
  @override
  _i5.Future<void> sendSignResult(int? requestId, List<int>? signedData) =>
      (super.noSuchMethod(
              Invocation.method(#sendSignResult, [requestId, signedData]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
  @override
  _i5.Future<void> sendApproveSession(
          int? requestId, _i2.SessionApprovalData? clientMeta,
          [_i2.ClientMeta? peerMeta]) =>
      (super.noSuchMethod(
              Invocation.method(
                  #sendApproveSession, [requestId, clientMeta, peerMeta]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
  @override
  void addListener(_i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
}

/// A class which mocks [WalletConnectSessionDelegate].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletConnectSessionDelegate extends _i1.Mock
    implements _i3.WalletConnectSessionDelegate {
  MockWalletConnectSessionDelegate() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.WalletConnectSessionDelegateEvents get events =>
      (super.noSuchMethod(Invocation.getter(#events),
              returnValue: _FakeWalletConnectSessionDelegateEvents_1(
                  this, Invocation.getter(#events)))
          as _i3.WalletConnectSessionDelegateEvents);
  @override
  _i5.Future<bool> complete(String? requestId, bool? allowed) =>
      (super.noSuchMethod(Invocation.method(#complete, [requestId, allowed]),
          returnValue: _i5.Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  void onApproveSession(int? requestId, _i2.SessionRequestData? data) => super
      .noSuchMethod(Invocation.method(#onApproveSession, [requestId, data]),
          returnValueForMissingStub: null);
  @override
  void onApproveSign(int? requestId, String? description, String? address,
          List<int>? msg) =>
      super.noSuchMethod(
          Invocation.method(
              #onApproveSign, [requestId, description, address, msg]),
          returnValueForMissingStub: null);
  @override
  void onApproveTransaction(int? requestId, String? description,
          String? address, _i2.SignTransactionData? signTransactionData) =>
      super.noSuchMethod(
          Invocation.method(#onApproveTransaction,
              [requestId, description, address, signTransactionData]),
          returnValueForMissingStub: null);
  @override
  void onClose() => super.noSuchMethod(Invocation.method(#onClose, []),
      returnValueForMissingStub: null);
  @override
  void onError(Exception? exception) =>
      super.noSuchMethod(Invocation.method(#onError, [exception]),
          returnValueForMissingStub: null);
}

/// A class which mocks [RemoteNotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteNotificationService extends _i1.Mock
    implements _i8.RemoteNotificationService {
  MockRemoteNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i9.MultiSigRemoteNotification> get multiSig =>
      (super.noSuchMethod(Invocation.getter(#multiSig),
              returnValue: _i5.Stream<_i9.MultiSigRemoteNotification>.empty())
          as _i5.Stream<_i9.MultiSigRemoteNotification>);
  @override
  bool isRegistered(String? topic) =>
      (super.noSuchMethod(Invocation.method(#isRegistered, [topic]),
          returnValue: false) as bool);
  @override
  _i5.Future<void> registerForPushNotifications(String? topic) =>
      (super.noSuchMethod(
              Invocation.method(#registerForPushNotifications, [topic]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
  @override
  _i5.Future<void> unregisterForPushNotifications(String? topic) =>
      (super.noSuchMethod(
              Invocation.method(#unregisterForPushNotifications, [topic]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
}

/// A class which mocks [KeyValueService].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeyValueService extends _i1.Mock implements _i10.KeyValueService {
  MockKeyValueService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> containsKey(_i10.PrefKey? key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]),
          returnValue: _i5.Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i4.ValueStream<_i10.KeyValueData<T>> stream<T>(_i10.PrefKey? key) =>
      (super.noSuchMethod(Invocation.method(#stream, [key]),
              returnValue: _FakeValueStream_2<_i10.KeyValueData<T>>(
                  this, Invocation.method(#stream, [key])))
          as _i4.ValueStream<_i10.KeyValueData<T>>);
  @override
  _i5.Future<bool?> getBool(_i10.PrefKey? key) =>
      (super.noSuchMethod(Invocation.method(#getBool, [key]),
          returnValue: _i5.Future<bool?>.value()) as _i5.Future<bool?>);
  @override
  _i5.Future<bool> setBool(_i10.PrefKey? key, bool? value) =>
      (super.noSuchMethod(Invocation.method(#setBool, [key, value]),
          returnValue: _i5.Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<bool> removeBool(_i10.PrefKey? key) =>
      (super.noSuchMethod(Invocation.method(#removeBool, [key]),
          returnValue: _i5.Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<String?> getString(_i10.PrefKey? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key]),
          returnValue: _i5.Future<String?>.value()) as _i5.Future<String?>);
  @override
  _i5.Future<bool> setString(_i10.PrefKey? key, String? value) =>
      (super.noSuchMethod(Invocation.method(#setString, [key, value]),
          returnValue: _i5.Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<bool> removeString(_i10.PrefKey? key) =>
      (super.noSuchMethod(Invocation.method(#removeString, [key]),
          returnValue: _i5.Future<bool>.value(false)) as _i5.Future<bool>);
}
